 tools/wpt/browser.py                           | 21 +++++++++++++++++++
 tools/wpt/run.py                               | 12 ++++++++++-
 tools/wptrunner/wptrunner/browsers/__init__.py |  3 ++-
 tools/wptrunner/wptrunner/browsers/ladybird.py | 29 ++++++++++++++++++++++++--
 4 files changed, 61 insertions(+), 4 deletions(-)

diff --git a/tools/wpt/browser.py b/tools/wpt/browser.py
index 5e8bfdab1..779b3b427 100644
--- a/tools/wpt/browser.py
+++ b/tools/wpt/browser.py
@@ -1918,6 +1918,27 @@ class WebKit(Browser):
     def version(self, binary=None, webdriver_binary=None):
         return None
 
+class Ladybird(Browser):
+    product = "ladybird"
+    requirements = None
+
+    def download(self, dest=None, channel=None, rename=None):
+        raise NotImplementedError
+
+    def install(self, dest=None, channel=None):
+        raise NotImplementedError
+
+    def find_binary(self, venv_path=None, channel=None):
+        return None
+
+    def find_webdriver(self, venv_path=None, channel=None):
+        return None
+
+    def install_webdriver(self, dest=None, channel=None, browser_binary=None):
+        raise NotImplementedError
+
+    def version(self, binary=None, webdriver_binary=None):
+        return None
 
 class WebKitTestRunner(Browser):
     """Interface for WebKitTestRunner.
diff --git a/tools/wpt/run.py b/tools/wpt/run.py
index 15be2af2d..9faed6b73 100644
--- a/tools/wpt/run.py
+++ b/tools/wpt/run.py
@@ -110,7 +110,7 @@ otherwise install OpenSSL and ensure that it's on your $PATH.""")
 def check_environ(product):
     if product not in ("android_weblayer", "android_webview", "chrome",
                        "chrome_android", "chrome_ios", "content_shell",
-                       "firefox", "firefox_android", "servo", "wktr"):
+                       "firefox", "firefox_android", "servo", "wktr", "ladybird"):
         config_builder = serve.build_config(os.path.join(wpt_root, "config.json"))
         # Override the ports to avoid looking for free ports
         config_builder.ssl = {"type": "none"}
@@ -692,6 +692,15 @@ class WebKit(BrowserSetup):
     def setup_kwargs(self, kwargs):
         pass
 
+class Ladybird(BrowserSetup):
+    name = "ladybird"
+    browser_cls = browser.Ladybird
+
+    def install(self, channel=None):
+        raise NotImplementedError
+
+    def setup_kwargs(self, kwargs):
+        pass
 
 class WebKitTestRunner(BrowserSetup):
     name = "wktr"
@@ -782,6 +791,7 @@ product_setup = {
     "wktr": WebKitTestRunner,
     "webkitgtk_minibrowser": WebKitGTKMiniBrowser,
     "epiphany": Epiphany,
+    "ladybird": Ladybird
 }
 
 
diff --git a/tools/wptrunner/wptrunner/browsers/__init__.py b/tools/wptrunner/wptrunner/browsers/__init__.py
index 9724bb957..4d1045769 100644
--- a/tools/wptrunner/wptrunner/browsers/__init__.py
+++ b/tools/wptrunner/wptrunner/browsers/__init__.py
@@ -43,4 +43,5 @@ product_list = ["android_weblayer",
                 "webkit",
                 "webkitgtk_minibrowser",
                 "wktr",
-                "epiphany"]
+                "epiphany",
+                "ladybird"]
diff --git a/tools/wptrunner/wptrunner/browsers/ladybird.py b/tools/wptrunner/wptrunner/browsers/ladybird.py
index ecdbc3db4..bbea908b3 100644
--- a/tools/wptrunner/wptrunner/browsers/ladybird.py
+++ b/tools/wptrunner/wptrunner/browsers/ladybird.py
@@ -1,3 +1,7 @@
+import logging
+import pprint
+import sys
+
 from .base import WebDriverBrowser, require_arg
 from .base import get_timeout_multiplier
 from ..executors import executor_kwargs as base_executor_kwargs
@@ -27,28 +31,49 @@ def check_args(**kwargs):
     pass
 
 def browser_kwargs(logger, test_type, run_info_data, config, **kwargs):
-    return {}
+    return {
+        "headless": kwargs["headless"],
+    }
 
 def executor_kwargs(logger, test_type, test_environment, run_info_data,
                     **kwargs):
     executor_kwargs = base_executor_kwargs(test_type, test_environment, run_info_data, **kwargs)
-    executor_kwargs["capabilities"] = {}
+    executor_kwargs["capabilities"] = {
+        "serenity:ladybird": {
+           "headless": True,
+        }
+    }
+    executor_kwargs["binary_args"] = ["--headless"]
     return executor_kwargs
 
 def env_options():
     return {}
 
 def env_extras(**kwargs):
+    l = open("/tmp/log.txt", "a")
+    pprint.pp(kwargs, l)
+    l.close()
     return []
 
 class LadybirdBrowser(WebDriverBrowser):
     def __init__(self, logger, webdriver_args=None,
                  host="localhost", port=None, base_path="/", env=None, **kwargs):
+        webdriver_bin = "gdb /home/sebi/devel/serenity/Build/lagom/bin/WebDriver"
         webdriver_bin = "WebDriver"
 
         super().__init__(logger, "binary???", webdriver_bin, webdriver_args=webdriver_args,
                          host=host, port=port, base_path=base_path, env=env, **kwargs)
         self.host = "localhost"
+        l = open("/tmp/log.txt", "a")
+        pprint.pp(webdriver_args, l)
+        pprint.pp(env, l)
+        pprint.pp(kwargs, l)
+        l.close()
 
     def make_command(self):
+        l = open("/tmp/log.txt", "a")
+        l.write("logging args")
+        l.write(" ".join(self.webdriver_args))
+        l.write("|")
+        l.close()
         return [self.webdriver_binary, "--port", str(self.port)] + self.webdriver_args
